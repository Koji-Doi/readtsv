#!/usr/bin/perl

# tsv file viewer and formatter

# % cat x.tsv | lesstsv -k=1,3
# % cat x.tsv | lesstsv

use strict;
use lib '/home/kdoi/lib/perl';
use Getopt::Long;
use Data::Dumper;
use myperl;

my($format,$opt_n,$opt_k,$opt_f,$opt_m,$opt_s,$opt_v,$opt_t,$opt_ifs,$opt_g,$opt_html,$opt_htmlopt, $opt_sort);
$opt_s="|"; # default field separator
my($f)=GetOptions(
  'f=s'       => \$opt_f,      # -f xxx       : file format(xxx=triple,class,property,instance)
  'n!'        => \$opt_n,      # -n           : display the number of field, line No., file name
  'k=s'       => \$opt_k,      # -k a,b,c,... : display only designated fields
  'multiple!' => \$opt_m,      # -multi       : display in muliple line format: one column -> one line
  'm!'        => \$opt_m,      #
  's=s'       => \$opt_s,      # -s ','       : specify field separator on output
  'ifs=s'     => \$opt_ifs,    # -ifs ','     : specify field separator on input
  't!'        => \$opt_t,      # -t           : treat first line as field names
  'v!'        => \$opt_v,      # -v           : display field names when -f is set
  #'nf=s'      => \$opt_nf     # -nf 'id,name': specify names of fields to be listed
  'g!'        => \$opt_g,      # -g           : postpone that the input is from grep of multiple files
  'html!'     => \$opt_html,   # -html        : output simple html text
  'htmlopt=s' => \$opt_htmlopt,# -htmlopt 1   : html table options
  'sort=s'    => \$opt_sort    # -sort 1n2dn  : sort option
);
my $ifs=(defined $opt_ifs)?$opt_ifs:"\t"; #input field separator

#my $formatfile='/home/kdoi/work/omixfiles-utf8.txt';
my(%format,$type,$n);

if(defined $opt_f){
#  open(my $fhi, '<', $formatfile) or die "$formatfile missed";
#  while(<DATA>){
#    s/(\x0a|\x0d)//g;
#    if(/>(.*)/){
#      $type=$1;
#    }elsif(/^(\d+)/){
#      $n=$1;
#    }else{
#      push(@{$format{$type}[$n]},$_);
#    }
#  }

}
#print Dumper($format{'triple'}[1]),".\n";
#exit;

my(@outf)=split(",", $opt_k);
my @outf_name;
my $outf_name_len=5;
if(defined $opt_f){
  @outf = map {(/^\d*$/)?$_-1:init_scinets($opt_f, $_)-1;} @outf; # fld name -> No.
}
if($opt_t){ # header line
  (defined $opt_f) and die "Cannot set -t with -f\n";
  my $x=<>;
  mychomp(\$x);
  @outf_name=split($ifs,$x,-1); # 161007
  map {my $l=length($_); $outf_name_len=($outf_name_len<$l)?$l:$outf_name_len} @outf_name;
  # todo: reflect $opt_k here (name->id)
  my(@outf2);
  if(scalar @outf > 1){
    foreach my $outf (@outf){
      for(my $i=0; $i<=$#outf_name; $i++){
        ($outf_name[$i] eq $outf) and push(@outf2,$i);
      }
    }
  }
  @outf=@outf2;
}
#print @outf;
#print $opt_k,$opt_n,$opt_f,join(":",@outf),"xxx\n";

# special characters in FS
$opt_s=~s/\\n/\n/g;
$opt_s=~s/\\t/\t/g;
my $outfs=(defined $opt_m)?"\n":$opt_s;
if(defined $opt_html){
  if(defined $opt_m){
    $outfs="</td></tr>\n";
  }else{
    $outfs="</td><td>";
  }
}

if(defined $opt_html){
  print qq{<html><body><table border="1">\n};
}

my @out;
my $ln; # line no.
while(<>){
  mychomp;
  s/^#.*//;
  s/(?=\s)#.*//;
  /^\s*$/ and next;
  my(@f)=split($ifs,$_,-1); # 161003 - to prevent drop last null fields
  push(@out,\@f);
}
foreach my $d (@out){
  $ln++;
  my(@f)=@$d;
  my $filename;
  (defined $opt_g) and $filename=shift(@f);
  my $k;
  (defined $opt_n) and $k=sprintf("%s$outfs%d$outfs%d$outfs", $ARGV, (scalar @f), $.);
  my $out;
  if(my($format)=$opt_f=~/^(triple|class|instance|property|conf)$/){
    for(my $i=0; $i<=$#f; $i++){
      (defined $opt_v) and $f[$i]=$format{$format}[$i+1][0].": ".$f[$i];
    }
  }
  if(defined $opt_m){
    for(my $i=0; $i<=$#f; $i++){
      my $header=(defined $opt_t)?"$ln-$outf_name[$i]":"$ln-$i";
      $f[$i]=sprintf("%*s: %s", -$outf_name_len-5, $header, $f[$i]);
    }
  }
  if(defined $opt_k){
    $out=join($outfs,@f[@outf]);
  }else{
    $out=join($outfs,@f);
  }
  (defined $k)        and $out="$k\t$out";
  (defined $filename) and $out="$filename\t$out";
  if(defined $opt_html){
    print"<tr><td>$out</td></tr>\n";
  }else{
    print "$out\n";
  }
}
if(defined $opt_html){
  print "</table>\n</body></html>\n";
}

sub mysort{
  my($data, $option)=@_;
  (defined $option) or return($data);
  my @data1=sort {$a->[1] cmp $b->[1]} @$data;
  return(\@data1);
}
