#!/usr/bin/env perl

=head1 NAME

readtsv - easy tsv file viewer/converter

=head1 SYNOPSIS

readtsv input.tsv

readtsv -k 1,2 input.tsv

readtsv -m input.tsv

readtsv -html input.tsv

readtsv -s ',' input.tsv > output.csv

=head1 OPTIONS

=over 1

=item -n           : display the number of field, line No., file name

=item -k a,b,c,... : display only designated fields

=item -multi       : display in muliple line format: one column -> one line

=item -m           : same as -multi

=item -s ','       : specify field separator on output

=item -ifs ','     : specify field separator on input

=item -t           : treat first line as field names

=item -v           : display field names when -t is set

=item -g           : postpone that the input is from grep of multiple files

=item -html        : output simple html text

=item -htmlopt 1   : html table options

=item -sort 1n2dn  : sort option

=item -help        : show this help

=item -h           : same as -help

=back

=cut

use strict;
use FindBin;
use Pod::Usage;
use Getopt::Long;
use Data::Dumper;
# update test local to github

sub help{
  print pod2usage(-verbose => 2, -input => $FindBin::Bin . "/" . $FindBin::Script);
}

sub mysort{
  my($data, $option)=@_;
  (defined $option) or return($data);
  my @data1=sort {$a->[1] cmp $b->[1]} @$data;
  return(\@data1);
}

# chomp adaptable for both win and linux text files
sub mychomp{
  my(@xx)=@_; # $x: reference of scalar
  if(scalar @xx == 0){
    s/(\x0a|\x0d)//g;
  }else{
    foreach my $x_ref (@xx){
      if(defined $x_ref){
        $$x_ref=~s/(\x0a|\x0d)//g;
        return($x_ref);
      }else{
        s/(\x0a|\x0d)//g;
      }
    }
  }
}

my($format, $opt_n, $opt_k, $opt_f, $opt_m, $opt_s, $opt_v, $opt_t, $opt_ifs, $opt_g, $opt_html, $opt_htmlopt, $opt_sort, $opt_h);
$opt_s="|"; # default field separator
my($f)=GetOptions(
  'n!'        => \$opt_n,      # -n           : display the number of field, line No., file name
  'k=s'       => \$opt_k,      # -k a,b,c,... : display only designated fields
  'multiple!' => \$opt_m,      # -multi       : display in muliple line format: one column -> one line
  'm!'        => \$opt_m,      #
  's=s'       => \$opt_s,      # -s ','       : specify field separator on output
  'ifs=s'     => \$opt_ifs,    # -ifs ','     : specify field separator on input
  't!'        => \$opt_t,      # -t           : treat first line as field names
  'v!'        => \$opt_v,      # -v           : display field names when -t is set
  #'nf=s'      => \$opt_nf     # -nf 'id,name': specify names of fields to be listed
  'g!'        => \$opt_g,      # -g           : postpone that the input is from grep of multiple files
  'html!'     => \$opt_html,   # -html        : output simple html text
  'htmlopt=s' => \$opt_htmlopt,# -htmlopt 1   : html table options
  'sort=s'    => \$opt_sort,    # -sort 1n2dn  : sort option
  'h|help'    => \$opt_h
);

($opt_h) and help();

my $ifs=(defined $opt_ifs)?$opt_ifs:"\t"; #input field separator

my(%format,$type,$n);

my(@outf)=split(",", $opt_k);
my @outf_name;
my $outf_name_len=5;
if(defined $opt_f){
  @outf = map {(/^\d*$/)?$_-1:init_scinets($opt_f, $_)-1;} @outf; # fld name -> No.
}
if($opt_t){ # header line
  (defined $opt_f) and die "Cannot set -t with -f\n";
  my $x=<>;
  mychomp(\$x);
  @outf_name=split($ifs,$x,-1); # 161007
  map {my $l=length($_); $outf_name_len=($outf_name_len<$l)?$l:$outf_name_len} @outf_name;
  # todo: reflect $opt_k here (name->id)
  my(@outf2);
  if(scalar @outf > 1){
    foreach my $outf (@outf){
      for(my $i=0; $i<=$#outf_name; $i++){
        ($outf_name[$i] eq $outf) and push(@outf2,$i);
      }
    }
  }
  @outf=@outf2;
}
#print @outf;
#print $opt_k,$opt_n,$opt_f,join(":",@outf),"xxx\n";

# special characters in FS
$opt_s=~s/\\n/\n/g;
$opt_s=~s/\\t/\t/g;
my $outfs=(defined $opt_m)?"\n":$opt_s;
if(defined $opt_html){
  if(defined $opt_m){
    $outfs="</td></tr>\n";
  }else{
    $outfs="</td><td>";
  }
}

if(defined $opt_html){
  print qq{<html><body><table border="1">\n};
}

my @out;
my $ln; # line no.
while(<>){
  mychomp;
  s/^#.*//;
  s/(?=\s)#.*//;
  /^\s*$/ and next;
  my(@f)=split($ifs,$_,-1); # 161003 - to prevent drop last null fields
  push(@out,\@f);
}
foreach my $d (@out){
  $ln++;
  my(@f)=@$d;
  my $filename;
  (defined $opt_g) and $filename=shift(@f);
  my $k;
  (defined $opt_n) and $k=sprintf("%s$outfs%d$outfs%d$outfs", $ARGV, (scalar @f), $.);
  my $out;
  if(defined $opt_t and defined $opt_v){
    for(my $i=0; $i<=$#f; $i++){
      $f[$i] = "$outf_name[$i]: $f[$i]";
    }
  }

  if(defined $opt_m){
    for(my $i=0; $i<=$#f; $i++){
      my $header=(defined $opt_t)?"$ln-$outf_name[$i]":"$ln-$i";
      $f[$i]=sprintf("%*s: %s", -$outf_name_len-5, $header, $f[$i]);
    }
  }
  if(defined $opt_k){
    $out=join($outfs,@f[@outf]);
  }else{
    $out=join($outfs,@f);
  }
  (defined $k)        and $out="$k\t$out";
  (defined $filename) and $out="$filename\t$out";
  if(defined $opt_html){
    print"<tr><td>$out</td></tr>\n";
  }else{
    print "$out\n";
  }
}
if(defined $opt_html){
  print "</table>\n</body></html>\n";
}

